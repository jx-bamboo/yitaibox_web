{"remainingRequest":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js!/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/cosmos_sig/core.js","dependencies":[{"path":"/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/cosmos_sig/core.js","mtime":1627026042242},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js","mtime":1622543821598},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js","mtime":1609932570543},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js","mtime":1622543823631}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/cosmos_sig/core.js"],"names":["base64ToBytes","bytesToBase64","toCanonicalJSONBytes","encode","bech32Encode","toWords","bech32ToWords","fromSeed","bip32FromSeed","mnemonicToSeedSync","bip39MnemonicToSeed","publicKeyCreate","secp256k1PublicKeyCreate","ecdsaSign","secp256k1Sign","esdsaVerify","secp256k1Verify","COSMOS_PREFIX","COSMOS_PATH","BROADCAST_MODE_SYNC","ripemd160","sha256","createWalletFromMnemonic","mnemonic","password","prefix","path","masterKey","createMasterKeyFromMnemonic","createWalletFromMasterKey","seed","createKeyPairFromMasterKey","privateKey","publicKey","address","createAddress","derivePath","Error","hash1","hash2","words","signTx","tx","meta","keyPair","signMsg","createSignMsg","signature","createSignature","signatures","account_number","chain_id","fee","memo","msgs","msg","sequence","signatureObj","createSignatureBytes","pub_key","type","value","bytes","sign","console","log","hash","Buffer","from","verifyTx","verifySignatures","length","every","verifySignature","signatureBytes","verifySignatureBytes","createBroadcastTx","mode"],"mappings":"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","sourcesContent":["import {\n    base64ToBytes,\n    bytesToBase64,\n    toCanonicalJSONBytes\n} from '@tendermint/belt';\n\nimport {\n    encode as bech32Encode,\n    toWords as bech32ToWords\n} from 'bech32';\n\nimport {\n    fromSeed as bip32FromSeed\n} from 'bip32';\n\nimport { mnemonicToSeedSync as bip39MnemonicToSeed } from 'bip39';\n\nimport {\n    publicKeyCreate as secp256k1PublicKeyCreate,\n    ecdsaSign as secp256k1Sign,\n    esdsaVerify as secp256k1Verify\n} from 'secp256k1';\n\nimport {\n    COSMOS_PREFIX,\n    COSMOS_PATH,\n    BROADCAST_MODE_SYNC\n} from './constants';\n\nimport {\n    ripemd160,\n    sha256\n} from './hash';\n\n\n/**\n * Create a {@link Wallet|`Wallet`} from a known mnemonic.\n *\n * @param   mnemonic - BIP39 mnemonic seed\n * @param   password - optional password from {@link https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#from-mnemonic-to-seed|the BIP39 spec}\n * @param   prefix   - Bech32 human readable part, defaulting to {@link COSMOS_PREFIX|`COSMOS_PREFIX`}\n * @param   path     - BIP32 derivation path, defaulting to {@link COSMOS_PATH|`COSMOS_PATH`}\n *\n * @returns a keypair and address derived from the provided mnemonic\n * @throws  will throw if the provided mnemonic is invalid\n */\nexport function createWalletFromMnemonic (mnemonic, password, prefix = COSMOS_PREFIX, path = COSMOS_PATH) {\n    const masterKey = createMasterKeyFromMnemonic(mnemonic, password);\n\n    return createWalletFromMasterKey(masterKey, prefix, path);\n}\n\n/**\n * Derive a BIP32 master key from a mnemonic.\n *\n * @param   mnemonic - BIP39 mnemonic seed\n * @param   password - optional password from {@link https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#from-mnemonic-to-seed|the BIP39 spec}\n *\n * @returns BIP32 master key\n * @throws  will throw if the provided mnemonic is invalid\n */\nexport function createMasterKeyFromMnemonic (mnemonic, password) {\n    const seed = bip39MnemonicToSeed(mnemonic, password);\n\n    return bip32FromSeed(seed);\n}\n\n/**\n * Create a {@link Wallet|`Wallet`} from a BIP32 master key.\n *\n * @param   masterKey - BIP32 master key\n * @param   prefix    - Bech32 human readable part, defaulting to {@link COSMOS_PREFIX|`COSMOS_PREFIX`}\n * @param   path      - BIP32 derivation path, defaulting to {@link COSMOS_PATH|`COSMOS_PATH`}\n *\n * @returns a keypair and address derived from the provided master key\n */\nexport function createWalletFromMasterKey (masterKey, prefix = COSMOS_PREFIX, path = COSMOS_PATH) {\n    const { privateKey, publicKey } = createKeyPairFromMasterKey(masterKey, path);\n\n    const address = createAddress(publicKey, prefix);\n\n    return {\n        privateKey,\n        publicKey,\n        address\n    };\n}\n\n/**\n * Derive a keypair from a BIP32 master key.\n *\n * @param   masterKey - BIP32 master key\n * @param   path      - BIP32 derivation path, defaulting to {@link COSMOS_PATH|`COSMOS_PATH`}\n *\n * @returns derived public and private key pair\n * @throws  will throw if a private key cannot be derived\n */\nexport function createKeyPairFromMasterKey (masterKey, path = COSMOS_PATH) {\n    const { privateKey } = masterKey.derivePath(path);\n    if (!privateKey) {\n        throw new Error('could not derive private key');\n    }\n\n    const publicKey = secp256k1PublicKeyCreate(privateKey, true);\n\n    return {\n        privateKey,\n        publicKey\n    };\n}\n\n/**\n * Derive a Bech32 address from a public key.\n *\n * @param   publicKey - public key bytes\n * @param   prefix    - Bech32 human readable part, defaulting to {@link COSMOS_PREFIX|`COSMOS_PREFIX`}\n *\n * @returns Bech32-encoded address\n */\nexport function createAddress (publicKey, prefix = COSMOS_PREFIX) {\n    const hash1 = sha256(publicKey);\n    const hash2 = ripemd160(hash1);\n    const words = bech32ToWords(hash2);\n\n    return bech32Encode(prefix, words);\n}\n\n/**\n * Sign a transaction.\n *\n * This combines the {@link Tx|`Tx`} and {@link SignMeta|`SignMeta`} into a {@link StdSignMsg|`StdSignMsg`}, signs it,\n * and attaches the signature to the transaction. If the transaction is already signed, the signature will be\n * added to the existing signatures.\n *\n * @param   tx      - transaction (signed or unsigned)\n * @param   meta    - metadata for signing\n * @param   keyPair - public and private key pair (or {@link Wallet|`Wallet`})\n *\n * @returns a signed transaction\n */\nexport function signTx (tx, meta, keyPair){\n    const signMsg    = createSignMsg(tx, meta);\n    const signature  = createSignature(signMsg, keyPair);\n    const signatures = ('signatures' in tx) ? [...tx.signatures, signature] : [signature];\n\n    return {\n        ...tx,\n        signatures\n    };\n}\n\n/**\n * Create a transaction with metadata for signing.\n *\n * @param   tx   - unsigned transaction\n * @param   meta - metadata for signing\n *\n * @returns a transaction with metadata for signing\n */\nexport function createSignMsg (tx, meta) {\n    return {\n        account_number: meta.account_number,\n        chain_id:       meta.chain_id,\n        fee:            tx.fee,\n        memo:           tx.memo,\n        msgs:           tx.msg,\n        sequence:       meta.sequence\n    };\n}\n\n/**\n * Create a signature from a {@link StdSignMsg|`StdSignMsg`}.\n *\n * @param   signMsg - transaction with metadata for signing\n * @param   keyPair - public and private key pair (or {@link Wallet|`Wallet`})\n *\n * @returns a signature and corresponding public key\n */\nexport function createSignature (signMsg, { privateKey, publicKey } ) {\n    const signatureObj = createSignatureBytes(signMsg, privateKey);\n    return {\n        signature: bytesToBase64(signatureObj.signature),\n        pub_key:   {\n            type:  'tendermint/PubKeySecp256k1',\n            value: bytesToBase64(publicKey)\n        }\n    };\n}\n\n/**\n * Create signature bytes from a {@link StdSignMsg|`StdSignMsg`}.\n *\n * @param   signMsg    - transaction with metadata for signing\n * @param   privateKey - private key bytes\n *\n * @returns signature bytes\n */\nexport function createSignatureBytes (signMsg, privateKey) {\n    const bytes = toCanonicalJSONBytes(signMsg);\n\n    return sign(bytes, privateKey);\n}\n\n/**\n * Sign the sha256 hash of `bytes` with a secp256k1 private key.\n *\n * @param   bytes      - bytes to hash and sign\n * @param   privateKey - private key bytes\n *\n * @returns signed hash of the bytes\n * @throws  will throw if the provided private key is invalid\n */\nexport function sign (bytes, privateKey) {\n    console.log(privateKey)\n    const hash = sha256(bytes);\n    const signature  = secp256k1Sign(hash, Buffer.from(privateKey));\n    return signature;\n}\n\n/**\n * Verify a signed transaction's signatures.\n *\n * @param   tx   - signed transaction\n * @param   meta - metadata for signing\n *\n * @returns `true` if all signatures are valid and match, `false` otherwise or if no signatures were provided\n */\nexport function verifyTx (tx, meta) {\n    const signMsg = createSignMsg(tx, meta);\n\n    return verifySignatures(signMsg, tx.signatures);\n}\n\n/**\n * Verify a {@link StdSignMsg|`StdSignMsg`} against multiple {@link StdSignature|`StdSignature`}s.\n *\n * @param   signMsg    - transaction with metadata for signing\n * @param   signatures - signatures\n *\n * @returns `true` if all signatures are valid and match, `false` otherwise or if no signatures were provided\n */\nexport function verifySignatures (signMsg, signatures) {\n    if (signatures.length > 0) {\n        return signatures.every(function (signature) {\n            return verifySignature(signMsg, signature);\n        });\n    }\n    else {\n        return false;\n    }\n}\n\n/**\n * Verify a {@link StdSignMsg|`StdSignMsg`} against a {@link StdSignature|`StdSignature`}.\n *\n * @param   signMsg   - transaction with metadata for signing\n * @param   signature - signature\n *\n * @returns `true` if the signature is valid and matches, `false` otherwise\n */\nexport function verifySignature (signMsg, signature) {\n    const signatureBytes = base64ToBytes(signature.signature);\n    const publicKey      = base64ToBytes(signature.pub_key.value);\n\n    return verifySignatureBytes(signMsg, signatureBytes, publicKey);\n}\n\n/**\n * Verify a signature against a {@link StdSignMsg|`StdSignMsg`}.\n *\n * @param   signMsg   - transaction with metadata for signing\n * @param   signature - signature bytes\n * @param   publicKey - public key bytes\n *\n * @returns `true` if the signature is valid and matches, `false` otherwise\n */\nexport function verifySignatureBytes (signMsg, signature, publicKey) {\n    const bytes = toCanonicalJSONBytes(signMsg);\n    const hash  = sha256(bytes);\n\n    return secp256k1Verify(hash, Buffer.from(signature), Buffer.from(publicKey));\n}\n\n/**\n * Prepare a signed transaction for broadcast.\n *\n * @param   tx   - signed transaction\n * @param   mode - broadcast mode\n *\n * @returns a transaction broadcast\n */\nexport function createBroadcastTx (tx, mode = BROADCAST_MODE_SYNC) {\n    return {\n        tx,\n        mode\n    };\n}\n"]}]}