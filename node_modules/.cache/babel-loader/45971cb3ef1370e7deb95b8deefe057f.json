{"remainingRequest":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js!/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/blockchain.js","dependencies":[{"path":"/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/blockchain.js","mtime":1627026042241},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js","mtime":1622543821598},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js","mtime":1609932570543},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js","mtime":1622543823631}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/blockchain.js"],"names":["Factory","getPrivKey","getPubKey","getAddress","chainIdKey","defaultChainId","chainId","ExtraMsgConstructors","LazyFactory","MsgQueue","Mutex","setChainId","id","localStorage","setItem","getChainId","getItem","resetLazyFactory","addExtraMsgConstructors","module","concat","Object","entries","getWallet","privateKey","publicKey","address","work","job","shift","batch","push","callback","msg","realSignAndBroadcast","console","log","length","startWorking","signAndBroadcast","msgName","args","msgs","forEach","clbk","send","map","x","message","included","setLazyFactory","fromWallet"],"mappings":"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","sourcesContent":["import Factory from './tx_factory'\nimport {getPrivKey, getPubKey, getAddress} from \"./key_manager\"\n\nconst chainIdKey = \"dbchain_chain_id\";\nconst defaultChainId = \"testnet\";\nvar chainId = null\n\nvar ExtraMsgConstructors = []\nvar LazyFactory = null\nvar MsgQueue = []\nvar Mutex = true\n\nfunction setChainId(id) {\n    localStorage.setItem(chainIdKey, id)\n    chainId = id\n}\n\nfunction getChainId() {\n    if (chainId != null) {\n        return chainId\n    }\n    chainId = localStorage.getItem(chainIdKey) || defaultChainId\n    return chainId\n}\n\nfunction resetLazyFactory(){\n    LazyFactory=null;\n}\n\nfunction addExtraMsgConstructors(module) {\n    ExtraMsgConstructors = ExtraMsgConstructors.concat(Object.entries(module))\n}\n\nfunction getWallet() {\n    var privateKey = getPrivKey()\n    var publicKey  = getPubKey()\n    var address    = getAddress()\n\n    return {privateKey, publicKey, address}\n}\n\nasync function work() {\n    var job = MsgQueue.shift()\n    var batch = []\n    while (job != null) {\n        batch.push(job)\n\n        let callback = job.msg[2]\n        if (typeof(callback) == \"function\" || (typeof(callback) == \"boolean\" && callback)) {\n            try {\n                await realSignAndBroadcast(batch)\n            } catch(e) {\n                console.log(\"Aocheesh: \", e)\n            }\n            batch = []\n        }\n        job = MsgQueue.shift()\n    }\n    // just in case the last batch is not empty\n    if (batch.length > 0) {\n        try {\n            await realSignAndBroadcast(batch)\n        } catch(e) {\n            console.log(\"Aocheesh: \", e)\n        }\n    }\n}\n\nasync function startWorking() {\n    // js is single-threaded, so this Mutex lock should work fine\n    if(Mutex) {\n        Mutex = false\n        await work()\n        Mutex = true\n    } else {\n        console.log(\"Another worker is still working. I'll wait in queue.\")\n    }\n}\n\n// when callback is a function or the true value of boolean,\n// we trigger the worker to act\nfunction signAndBroadcast(msgName, args, callback) {\n    let msg = {msg: [msgName, args, callback]}\n    MsgQueue.push(msg)\n    if (typeof(callback) == \"function\" || (typeof(callback) == \"boolean\" && callback)) {\n        startWorking()\n    }\n}\n\nasync function realSignAndBroadcast(batch) { //msgName, args, callback) {\n    if(LazyFactory == null) {\n        LazyFactory = new Factory(getChainId(), getWallet(), ExtraMsgConstructors)\n    }\n    let callback = null\n    let msgs = []\n    batch.forEach(function(job) {\n        let [msgName, args, clbk] = job.msg\n        callback = clbk\n        if(msgName) {\n            msgs.push(LazyFactory[msgName](args))\n        }\n    })\n    let included = await LazyFactory.send(msgs.map(x => x.message))\n    if(typeof(callback) == \"function\") { callback(included) }\n}\n\nasync function setLazyFactory(chainId = 'ytbox', fromWallet = {\n    address: \"cosmos10xww29t2xp6tfycdjx27k4vkjlkww0sws4epdd\",\n    privateKey: [196, 149, 0, 158, 190, 8, 250, 167, 106, 51, 35, 249, 88, 180, 160, 231, 242, 23, 230, 109, 255, 246, 215, 74, 52, 29, 154, 3, 214, 186, 190, 182],\n    publicKey: [2, 229, 103, 24, 144, 188, 0, 90, 230, 158, 146, 113, 88, 173, 45, 177, 103, 160, 105, 61, 97, 186, 244, 28, 85, 241, 77, 233, 45, 72, 214, 86, 164]\n}, msg = []) {\n    LazyFactory = new Factory(chainId, fromWallet, msg)\n    console.log(LazyFactory)\n}\nexport { signAndBroadcast, addExtraMsgConstructors, getChainId, setChainId, resetLazyFactory, setLazyFactory}\n"]}]}