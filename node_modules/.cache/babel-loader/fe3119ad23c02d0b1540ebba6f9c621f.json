{"remainingRequest":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js!/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/rest_client.js","dependencies":[{"path":"/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/rest_client.js","mtime":1627026042243},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js","mtime":1622543821598},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js","mtime":1609932570543},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js","mtime":1622543823631}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/rest_client.js"],"names":["Base64","restGet","restPost","createAccessToken","signAndBroadcast","bs58","require","queryRoot","checkChainId","chainId","uri","uriBuilder","response","data","result","getFriends","getPendingFriends","getAppCode","adminOnly","getApp","appCode","getApps","apps","i","length","app","push","isSysAdmin","isAppUser","getGroups","getGroupMemo","groupName","getGroupMembers","getTables","getTableOptions","tableName","getTableRaw","name","getTable","fields","f","getFieldOptions","fieldName","getInsertFilter","filter","getTrigger","trigger","getTableMemo","memo","getAllIds","getIdsBy","value","getRow","id","canInsertRow","record","recordJson","Buffer","from","JSON","stringify","recordJsonBase58","encode","querier","querierObj","query","getAccount","address","account","sendToken","toAddress","amount","callback","amounts","denom","addFriend","myName","friendAddr","friendName","dropFriend","respondFriend","action","insertRow","encodedFields","app_code","table_name","uploadFile","file","formData","FormData","append","headers","commit","args","accessToken","splice","unshift","join","callFunction","FunctionName","Argument","function_name","argument","callCustomQuerier","forEach","element","bs","substring","bss"],"mappings":"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","sourcesContent":["import { Base64 } from 'js-base64';\nimport { restGet, restPost } from \"./rest_lib\";\nimport { createAccessToken } from \"./access_token\";\nimport {signAndBroadcast} from \"./blockchain\"\nconst bs58 =  require(\"bs58\")\n\nconst queryRoot = \"/dbchain\";\n\n///////////////////////\n//                   //\n// dbchain queries //\n//                   //\n///////////////////////\n\nasync function checkChainId(chainId) {\n  var uri = uriBuilder(\"check_chain_id\", chainId);\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getFriends() {\n  var uri = uriBuilder(\"friends\");\n  var response = await restGet(uri);\n  if (response.data.result == null) {\n    return []\n  } else {\n    return response.data.result\n  }\n}\n\nasync function getPendingFriends() {\n  var uri = uriBuilder(\"pending_friends\");\n  var response = await restGet(uri);\n  if (response.data.result == null) {\n    return []\n  } else {\n    return response.data.result\n  }\n}\n\nasync function getAppCode(adminOnly=false) {\n  var uri;\n  if (adminOnly) {\n    uri = uriBuilder(\"admin_apps\");\n  } else {\n    uri = uriBuilder(\"application\");\n  }\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getApp(appCode) {\n  var uri = uriBuilder(\"application\", appCode);\n  var response = await restGet(uri);\n  return response.data.result;\n}\n/**\n * If I pass true, I get all the applications that I'm an administrator. If I pass false or if I don't pass, I get all the applications in the chain\n * @param {Boolean} adminOnly true or false\n * @returns {Array} Applications I manage (I create or I am an administrator)\n */\nasync function getApps(adminOnly=false) {\n  var appCode = await getAppCode(adminOnly) || [];\n  var apps = [];\n  for (var i = 0; i < appCode.length; i += 1) {\n    var app = await getApp(appCode[i]);\n    apps.push(app);\n  }\n  return apps;\n}\n\nasync function isSysAdmin() {\n  var uri = uriBuilder(\"is_sys_admin\");\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function isAppUser(appCode) {\n  var uri = uriBuilder(\"is_app_user\", appCode);\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getGroups(appCode) {\n  var uri = uriBuilder(\"groups\", appCode)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getGroupMemo(appCode, groupName) {\n  var uri = uriBuilder(\"group_memo\", appCode, groupName)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getGroupMembers(appCode, groupName) {\n  var uri = uriBuilder(\"group\", appCode, groupName)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getTables(appCode) {\n  var uri = uriBuilder(\"tables\", appCode)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getTableOptions(appCode, tableName) {\n  var uri = uriBuilder(\"table-options\", appCode, tableName);\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\n/**\n * Query the attributes attached to the table\n * @param {String} appCode this appCode\n * @param {String} tableName The name of the table to query\n * @param {String} name To query the value, can pass or not pass, do not pass or return all，options：['fields','filter','momes','name','owner','trigger']\n * @returns Returns the corresponding property or all properties.  Object or Array\n */\nasync function getTableRaw(appCode, tableName, name='') {\n  var uri = uriBuilder(\"tables\", appCode, tableName);\n  var response = await restGet(uri);\n  if(name){\n    return response.data.result[name];\n  }\n  return response.data.result;\n}\n\nasync function getTable(appCode, tableName) {\n  var fields= await getTableRaw(appCode, tableName,'fields');\n  var result = [];\n  for (var i = 0; i < fields.length; i++) {\n    var f = fields[i];\n    // no need to show the system fields\n    if (f == \"id\" || f == \"created_at\" || f == \"created_by\") {\n      continue;\n    }\n    result.push(f);\n  }\n  return result;\n}\n\nasync function getFieldOptions(appCode, tableName, fieldName) {\n  var uri = uriBuilder(\"column-options\", appCode, tableName, fieldName);\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getInsertFilter(appCode, tableName) {\n  var uri = uriBuilder(\"tables\", appCode, tableName);\n  var response = await restGet(uri);\n  var filter = response.data.result.filter;\n  return filter;\n}\n\nasync function getTrigger(appCode, tableName) {\n  var uri = uriBuilder(\"tables\", appCode, tableName);\n  var response = await restGet(uri);\n  var trigger = response.data.result.trigger;\n  return trigger;\n}\n\nasync function getTableMemo(appCode, tableName) {\n  var memo = await getTableRaw(appCode, tableName,'memo');\n  return memo;\n}\n\nasync function getAllIds(appCode, tableName) {\n  var uri = uriBuilder(\"find_all\", appCode, tableName)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getIdsBy(appCode, tableName, fieldName, value) {\n  var uri = uriBuilder(\"find_by\", appCode, tableName, fieldName, value)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function getRow(appCode, tableName, id) {\n  var uri = uriBuilder(\"find\", appCode, tableName, id)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\nasync function canInsertRow(appCode, tableName, record) {\n  var recordJson = Buffer.from(JSON.stringify(record));\n  var recordJsonBase58 = bs58.encode(recordJson);\n  var uri = uriBuilder(\"can_insert_row\", appCode, tableName, recordJsonBase58);\n  var response = await restGet(uri);\n  if (response.data.result == null) {\n    return [];\n  } else {\n    return response.data.result;\n  }\n}\n\nasync function querier(appCode, querierObj) {\n  var query = Buffer.from(JSON.stringify(querierObj));\n  query = bs58.encode(query);\n  var uri = uriBuilder(\"querier\", appCode, query);\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\n//////////////////////////////////\n//                              //\n// other than dbchain queries   //\n//                              //\n//////////////////////////////////\n\nasync function getAccount(address) {\n  if (address == null) {\n    return null;\n  }\n  var response = await restGet(`/auth/accounts/${address}`);\n  var account;\n  try {\n    account = response.data.result.value;\n  } catch (e) {\n    return null;\n  }\n\n  if (account.address == \"\") {\n    return null;\n  }\n  return account;\n}\n\n//////////////////\n//              //\n// transactions //\n//              //\n//////////////////\n\nasync function sendToken(toAddress, amount, callback) {\n    await signAndBroadcast(\n        'MsgSend',\n        {\n            toAddress,\n            amounts: [{denom: 'dbctoken', amount: amount}]\n        },\n        callback\n    );\n}\n\nasync function addFriend(myName, friendAddr, friendName, callback) {\n    if (friendAddr == null) {\n      return\n    }\n    await signAndBroadcast(\n        'MsgAddFriend',\n        {\n            myName,\n            friendAddr,\n            friendName\n        },\n        callback\n    );\n}\n\nasync function dropFriend(friendAddr, callback) {\n    if (friendAddr == null) {\n      return\n    }\n    await signAndBroadcast(\n        'MsgDropFriend',\n        {\n            friendAddr\n        },\n        callback\n    );\n}\n\nasync function respondFriend(friendAddr, action, callback) {\n    if (friendAddr == null) {\n      return\n    }\n    await signAndBroadcast(\n        'MsgRespondFriend',\n        {\n            friendAddr,\n            action\n        },\n        callback\n    );\n}\n\nasync function insertRow(appCode, tableName, fields, callback) {\n    var encodedFields = Base64.encode(JSON.stringify(fields))\n    await signAndBroadcast(\n        \"MsgInsertRow\",\n        {\n            app_code: appCode,\n            table_name: tableName,\n            fields: encodedFields\n        },\n        callback\n    );\n}\n\nasync function uploadFile(file) {\n    var uri = uriBuilder(\"upload\");\n    var formData = new FormData();\n    formData.append('file', file);\n    var response = await restPost(\n        uri,\n        formData,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n    );\n    return(response.data.result)\n}\n\nasync function commit(callback) {\n    await signAndBroadcast(\n        null,\n        null,\n        callback\n    );\n}\n//////////////////////\n//                  //\n// helper functions //\n//                  //\n//////////////////////\n\nfunction uriBuilder(...args) {\n  if (args.length < 1) {\n    throw \"At least one parameter is needed!\";\n  }\n  var accessToken = createAccessToken();\n  args.splice(1, 0, accessToken);\n  args.unshift(queryRoot);\n  return args.join(\"/\");\n}\n\n/**\n * Executes the current library to specify a custom function\n * @param {String} appCode Your appCode\n * @param {String} FunctionName Custom function name\n * @param {Array} Argument ask sb to do sth ;\n * @param {Function} callback The callback function that fires after execution\n */\n async function callFunction(appCode, FunctionName, Argument = [], callback) {\n  let data = JSON.stringify(Argument)\n\n  await signAndBroadcast(\n    'MsgCallFunction',\n    {\n      appCode,\n      function_name: FunctionName,\n      argument: data\n    },\n    callback\n  );\n}\n\n/**\n * Executes the current library to specify a custom function\n * @param {String} appCode Your appCode\n * @param {String} FunctionName Custom function name\n * @param {Array} Argument ask sb to do sth ;\n * @param {Function} callback The callback function that fires after execution\n */\nasync function callCustomQuerier(appCode, FunctionName, Argument = [], callback) {\n  let query = '';\n  Argument[1].forEach(element => {\n    query += bs58.encode(Buffer.from(element)) + '/'\n  });\n  let bs = query.substring(0, query.length - 1);\n  let bss = bs58.encode(Buffer.from(bs))\n  var uri = uriBuilder(\"call-custom-querier\", appCode, FunctionName, bss)\n  var response = await restGet(uri);\n  return response.data.result;\n}\n\n\nexport { getFriends, getPendingFriends, getAppCode, getApps, getApp, isAppUser, isSysAdmin, checkChainId,\n         getTables, getTable, getGroups, getGroupMembers, getTableOptions, getFieldOptions,\n         getInsertFilter, getTrigger, getTableMemo, getGroupMemo, getTableRaw, uriBuilder,\n         getAllIds, getIdsBy, getRow, getAccount, insertRow, sendToken, canInsertRow,\n         uploadFile, addFriend, dropFriend, respondFriend, commit, querier, callFunction ,callCustomQuerier\n};\n"]}]}