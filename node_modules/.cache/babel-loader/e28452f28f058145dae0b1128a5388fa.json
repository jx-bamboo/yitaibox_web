{"remainingRequest":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/thread-loader/dist/cjs.js!/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js!/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/tx_factory/index.js","dependencies":[{"path":"/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/tx_factory/index.js","mtime":1627026042243},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js","mtime":1622543821598},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/thread-loader/dist/cjs.js","mtime":1622543821656},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/babel-loader/lib/index.js","mtime":1609932570543},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/eslint-loader/index.js","mtime":1622543823631}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/abadboy/Documents/works/yitaibox_web/src/dbchain-js-client/src/tx_factory/index.js"],"names":["signTx","MessageConstructors","restGet","restPost","uriBuilder","timeout","ms","Promise","resolve","setTimeout","sleep","fn","args","txIncludedInBlock","txHash","uri","response","data","result","state","queryTxInclusion","iterations","included","Factory","chainId","fromWallet","extraMsgConstructorList","Object","entries","concat","forEach","name","messageConstructor","senderAddress","address","message","send","account","value","messages","tx","fee","amount","gas","memo","msg","getAccount","signMeta","chain_id","account_number","sequence","signedTx","privateKey","publicKey","broadcastBody","JSON","stringify","mode","txhash"],"mappings":"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","sourcesContent":["import { signTx } from \"../cosmos_sig/index\"\nimport * as MessageConstructors from './messages'\nimport { restGet, restPost } from '../rest_lib'\nimport {uriBuilder } from \"../rest_client\"\n\nfunction timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function sleep(fn, ...args) {\n    await timeout(1000);\n    return await fn(...args);\n}\n\nasync function txIncludedInBlock(txHash) {\n  try {\n    var uri = uriBuilder(\"tx-simple-result\",  txHash);\n    let response = await restGet(uri)\n    if (response.data.result.state=='success') {\n      return true\n    }\n    if (response.data.result.state=='fail') {\n      return response\n    }\n     else {\n      return false\n    }\n  } catch(err) {\n    return false\n  }\n}\n\nasync function queryTxInclusion (txHash, iterations = 15) {\n  let included  = await txIncludedInBlock(txHash)\n  if(typeof(included)=='object'){\n    return included;\n  }\n  if (included) {\n    return true\n  }\n\n  var result = false\n  iterations --\n  if (iterations > 0) {\n    result = await sleep(await queryTxInclusion, txHash, iterations)\n  }\n  return result \n}\n\nexport default class Factory {\n  constructor (chainId, fromWallet, extraMsgConstructorList=[]) {\n    this.chainId     = chainId\n    this.fromWallet = fromWallet\n\n    Object.entries(MessageConstructors).concat(extraMsgConstructorList)\n      .forEach(([name, messageConstructor]) => {\n        this[name] = function (args) {\n          const senderAddress = this.fromWallet.address\n          const message = messageConstructor(senderAddress, args)\n\n          return {\n            message,\n            send: () => this.send([message])\n          }\n        }\n      })\n  }\n\n  async getAccount() {\n    var account = await restGet(`/auth/accounts/${this.fromWallet.address}`)\n    return account.data.result.value\n  } \n\n  async send(messages) {\n    var tx = {\n      fee: {\n        amount: [],\n        gas:    '99999999'\n      },\n      memo: '',\n      msg: messages\n    };\n\n    var account = await this.getAccount()\n\n    const signMeta = {\n      chain_id:       this.chainId,\n      account_number: \"\" + account.account_number,\n      sequence:       \"\" + account.sequence\n    }\n\n    const signedTx = signTx(tx, signMeta, {privateKey: this.fromWallet.privateKey, publicKey: this.fromWallet.publicKey})\n\n    var broadcastBody = JSON.stringify({\n      tx: signedTx,\n      mode: 'async'\n    })\n  \n    var response = await restPost(\"/txs\", broadcastBody)\n    var txHash = response.data.txhash\n    var included = await queryTxInclusion(txHash)\n    return included\n  }\n}\n\n"]}]}