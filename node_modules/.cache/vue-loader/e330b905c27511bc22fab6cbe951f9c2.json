{"remainingRequest":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/abadboy/Documents/works/yitaibox_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/abadboy/Documents/works/yitaibox_web/src/views/newPc/home.vue?vue&type=template&id=5438e1d5&scoped=true&","dependencies":[{"path":"/Users/abadboy/Documents/works/yitaibox_web/src/views/newPc/home.vue","mtime":1628934688705},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js","mtime":1622543821598},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1627026069863},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/cache-loader/dist/cjs.js","mtime":1622543821598},{"path":"/Users/abadboy/Documents/works/yitaibox_web/node_modules/vue-loader/lib/index.js","mtime":1627026069863}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}